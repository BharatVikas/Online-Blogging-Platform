const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const multer = require('multer');
const bcrypt = require('bcrypt');

const app = express();
const port = 8081;

app.use(cors({ origin: 'http://localhost:3000', credentials: true }));
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/blogbuster');

const User = mongoose.model(
  'User',
  new mongoose.Schema(
    {
      username: { type: String, required: true, unique: true },
      email: { type: String, required: true, unique: true },
      password: { type: String, required: true },
    },
    { collection: 'users' }
  )
);

const BlogPostSchema = new mongoose.Schema(
  {
    title: String,
    content: String,
    tags: [String],
    media: {
      data: Buffer, // Store binary image data
      contentType: String // Store content type (e.g., 'image/jpeg')
    },
    privacy: String,
    author: { username: String },
    publicationDate: {
      type: Date,
      default: Date.now,
    },
  },
  { collection: 'blogposts' }
);

const BlogPost = mongoose.model('BlogPost', BlogPostSchema);

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

app.post('/signup', async (req, res) => {
  // Signup route remains unchanged
});

app.post('/login', async (req, res) => {
  // Login route remains unchanged
});

app.delete('/api/user/:id', async (req, res) => {
  // User deletion route remains unchanged
});

app.post('/api/blog', upload.single('media'), async (req, res) => {
  try {
    const { title, content, tags, privacy, author } = req.body;
    const mediaData = {
      data: req.file.buffer,
      contentType: req.file.mimetype
    };

    const blogPost = new BlogPost({
      title,
      content,
      tags: tags.split(',').map((tag) => tag.trim()),
      privacy,
      author: { username: author },
      media: mediaData,
    });

    await blogPost.save();

    res.status(201).json({ message: 'Blog post submitted successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.get('/api/feed', async (req, res) => {
  // Feed retrieval route remains unchanged
});

app.post('/api/logout', async (req, res) => {
  // Logout route remains unchanged
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
